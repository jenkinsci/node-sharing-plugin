<?xml version="1.0" encoding="UTF-8"?>
<project
 xmlns="http://maven.apache.org/POM/4.0.0"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
 <modelVersion>4.0.0</modelVersion>

 <parent>
  <groupId>org.jenkins-ci.plugins</groupId>
  <artifactId>plugin</artifactId>
  <!-- Baseline Jenkins version you use to build and test the plugin. Users 
   must have this version or newer to run. -->
  <version>1.609.3</version>
  <relativePath />
 </parent>
 <groupId>org.jenkins-ci.plugins</groupId>
 <artifactId>foreman-node-sharing</artifactId>
 <version>1.1.0-SNAPSHOT</version>
 <packaging>hpi</packaging>

  <scm>
    <connection>scm:git:git://github.com/jenkinsci/foreman-node-sharing-plugin.git</connection>
    <developerConnection>scm:git:git@github.com:jenkinsci/foreman-node-sharing-plugin.git</developerConnection>
    <url>https://github.com/jenkinsci/foreman-node-sharing-plugin</url>
    <tag>HEAD</tag>
  </scm>

 <properties>
  <jenkins.version>1.651.3</jenkins.version>
  <!-- Java Level to use. Java 7 required when using core >= 1.612 -->
  <java.level>6</java.level>
  <!-- Jenkins Test Harness version you use to test the plugin. -->
  <!-- For Jenkins version >= 1.580.1 use JTH 2.x or higher. -->
  <jenkins-test-harness.version>2.1</jenkins-test-harness.version>
  <!-- Other properties you may want to use: ~ hpi-plugin.version: The HPI 
   Maven Plugin version used by the plugin.. ~ stapler-plugin.version: The Stapler 
   Maven plugin version required by the plugin. -->
  <checkstyle.version>2.13</checkstyle.version>
  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  <surefire.useFile>false</surefire.useFile>
 </properties>

 <name>Foreman Node Sharing Plugin</name>
 <description>Attach Foreman Shared Resources as Jenkins Nodes</description>
 <url>https://wiki.jenkins-ci.org/display/JENKINS/Foreman+Node+Sharing+Plugin</url>
 <licenses>
  <license>
   <name>MIT License</name>
   <url>http://opensource.org/licenses/MIT</url>
  </license>
 </licenses>

 <developers>
    <developer>
        <id>scoheb</id>
        <name>Scott Hebert</name>
        <email>shebert@redhat.com</email>
    </developer>
 </developers>

 <repositories>
  <repository>
   <id>repo.jenkins-ci.org</id>
   <url>http://repo.jenkins-ci.org/public/</url>
  </repository>
 </repositories>

 <pluginRepositories>
  <pluginRepository>
   <id>repo.jenkins-ci.org</id>
   <url>http://repo.jenkins-ci.org/public/</url>
   </pluginRepository>
 </pluginRepositories>

 <dependencies>
  <dependency>
   <groupId>org.apache.commons</groupId>
   <artifactId>commons-lang3</artifactId>
   <version>3.4</version>
  </dependency>
  <dependency>
   <groupId>org.glassfish.jersey.core</groupId>
   <artifactId>jersey-client</artifactId>
   <version>2.22.1</version>
  </dependency>
  <dependency>
   <groupId>org.glassfish.jersey.media</groupId>
   <artifactId>jersey-media-json-jackson</artifactId>
   <version>2.6</version>
  </dependency>
  <dependency>
   <groupId>org.jenkins-ci.plugins</groupId>
   <artifactId>ssh-slaves</artifactId>
   <version>1.10</version>
  </dependency>
  <dependency>
   <groupId>com.github.tomakehurst</groupId>
   <artifactId>wiremock</artifactId>
   <version>1.58</version>
   <scope>test</scope>
  </dependency>
  <dependency>
   <groupId>com.fasterxml.jackson.core</groupId>
   <artifactId>jackson-annotations</artifactId>
   <version>2.6.6</version>
  </dependency>
  <dependency>
   <groupId>com.fasterxml.jackson.core</groupId>
   <artifactId>jackson-core</artifactId>
   <version>2.6.6</version>
  </dependency>
  <dependency>
   <groupId>com.fasterxml.jackson.core</groupId>
   <artifactId>jackson-databind</artifactId>
   <version>2.6.6</version>
  </dependency>
  <dependency>
   <groupId>org.jacoco</groupId>
   <artifactId>jacoco-maven-plugin</artifactId>
   <version>0.7.6.201602180812</version>
   <scope>test</scope>
   <exclusions>
    <exclusion>
     <artifactId>xml-apis</artifactId>
     <groupId>xml-apis</groupId>
    </exclusion>
   </exclusions>
  </dependency>
  <dependency>
   <groupId>org.apache.maven</groupId>
   <artifactId>maven-model</artifactId>
   <version>3.0.5</version>
  </dependency>
 </dependencies>
 <build>
  <plugins>
   <plugin>
    <artifactId>maven-compiler-plugin</artifactId>
     <configuration> 
     <source>1.6</source>
     <target>1.6</target>
    </configuration>
   </plugin>
   <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-surefire-plugin</artifactId>
    <configuration>
     <!-- Sets the VM argument line used when unit tests are run. -->
     <argLine>${surefireArgLine}</argLine>
     <!-- Skips unit tests if the value of skip.unit.tests property is true -->
     <skipTests>${skip.unit.tests}</skipTests>
     <!-- Excludes integration tests when unit tests are run. -->
     <excludes>
      <exclude>InjectedTest.java</exclude>
     </excludes>
     <environmentVariables>
      <JENKINS_JAVA_OPTS>${surefireATHArgLine}</JENKINS_JAVA_OPTS>
      <PLUGIN_DIR>plugins</PLUGIN_DIR>
     </environmentVariables>
    </configuration>
   </plugin>
   <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-checkstyle-plugin</artifactId>
    <version>${checkstyle.version}</version>
    <configuration>
     <configLocation>build-config/swe_checkstyle.xml</configLocation>
     <suppressionsLocation>build-config/checkstyle-suppressions.xml</suppressionsLocation>
     <suppressionsFileExpression>checkstyle.suppressions.file</suppressionsFileExpression>
     <includeTestSourceDirectory>true</includeTestSourceDirectory>
     <consoleOutput>true</consoleOutput>
    </configuration>
    <executions>
     <execution>
      <id>compile-checkstyle</id>
      <goals>
       <goal>checkstyle</goal>
      </goals>
      <phase>compile</phase>
     </execution>
     <execution>
      <id>test-check</id>
      <goals>
       <goal>check</goal>
      </goals>
      <phase>test</phase>
      <configuration>
       <violationSeverity>warning</violationSeverity>
      </configuration>
     </execution>
    </executions>
   </plugin>
   <plugin>
    <groupId>org.jacoco</groupId>
    <artifactId>jacoco-maven-plugin</artifactId>
    <version>0.7.6.201602180812</version>
    <executions>
     <!-- Prepares the property pointing to the JaCoCo runtime agent which 
      is passed as VM argument when Maven the Surefire plugin is executed. -->
     <execution>
      <id>pre-unit-test</id>
      <goals>
       <goal>prepare-agent</goal>
      </goals>
      <configuration>
       <!-- Sets the path to the file which contains the execution data. -->
       <destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
       <!-- Sets the name of the property containing the settings for JaCoCo 
        runtime agent. -->
       <propertyName>surefireArgLine</propertyName>
      </configuration>
     </execution>
     <execution>
      <id>pre-ath-test</id>
      <goals>
       <goal>prepare-agent</goal>
      </goals>
      <configuration>
       <!-- Sets the path to the file which contains the execution data. -->
       <destFile>${project.build.directory}/coverage-reports/jacoco-it.exec</destFile>
       <!-- Sets the name of the property containing the settings for JaCoCo 
        runtime agent. -->
       <propertyName>surefireATHArgLine</propertyName>
      </configuration>
     </execution>
     <!-- Ensures that the code coverage report for unit tests is created 
      after unit tests have been run. -->
     <execution>
      <id>post-unit-test-merge</id>
      <phase>test</phase>
      <goals>
       <goal>merge</goal>
      </goals>
      <configuration>
       <fileSets>
        <fileSet implementation="org.apache.maven.shared.model.fileset.FileSet">
         <directory>${project.build.directory}/coverage-reports</directory>
         <includes>
          <include>*.exec</include>
         </includes>
        </fileSet>
       </fileSets>
      </configuration>
     </execution>
     <execution>
      <id>post-unit-test</id>
      <phase>test</phase>
      <goals>
       <goal>report</goal>
      </goals>
      <configuration>
       <dataFile>${project.build.directory}/jacoco.exec</dataFile>
       <outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
      </configuration>
     </execution>
    </executions>
   </plugin>
  </plugins>
 </build>
</project>
